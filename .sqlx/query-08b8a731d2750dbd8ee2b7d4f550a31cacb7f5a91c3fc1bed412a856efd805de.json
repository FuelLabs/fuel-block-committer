{
  "db_name": "PostgreSQL",
  "query": "\n            WITH\n\n            -- Delete from da_submission\n            deleted_blob_transactions AS (\n                DELETE FROM da_submission\n                WHERE created_at < $1\n                RETURNING id\n            ),\n\n            -- Delete from da_submission_fragments\n            deleted_transaction_fragments AS (\n                DELETE FROM da_submission_fragments\n                WHERE da_submission_id IN (SELECT id FROM deleted_blob_transactions)\n                RETURNING da_submission_id, fragment_id\n            ),\n\n            -- Build updated_transaction_fragments that represent the state after deletions\n            updated_transaction_fragments AS (\n                SELECT fragment_id FROM da_submission_fragments\n                WHERE da_submission_id NOT IN (SELECT da_submission_id FROM deleted_transaction_fragments)\n            ),\n\n            -- Delete fragments that are not referenced by any other transaction\n            deleted_fragments AS (\n                DELETE FROM l1_fragments f\n                WHERE id IN (SELECT fragment_id FROM deleted_transaction_fragments)\n                  AND NOT EXISTS (\n                      SELECT 1\n                      FROM updated_transaction_fragments tf\n                      WHERE tf.fragment_id = f.id\n                  )\n                RETURNING id, bundle_id\n            ),\n\n            -- Step 4: Build updated_fragments that represent the state after deletions\n            updated_fragments AS (\n                SELECT bundle_id\n                FROM l1_fragments\n                WHERE id NOT IN (SELECT id FROM deleted_fragments)\n            ),\n\n            -- Delete unreferenced bundles and collect start and end heights\n            deleted_bundles AS (\n                DELETE FROM bundles b\n                WHERE id IN (SELECT bundle_id FROM deleted_fragments)\n                  AND NOT EXISTS (\n                      SELECT 1\n                      FROM updated_fragments f\n                      WHERE f.bundle_id = b.id\n                  )\n                RETURNING start_height, end_height, id\n            ),\n\n            -- Delete unreferenced bundle costs\n            deleted_bundle_costs AS (\n                DELETE FROM bundle_cost bc\n                WHERE bundle_id IN (SELECT id FROM deleted_bundles)\n            ),\n\n            -- Delete corresponding fuel_blocks entries\n            deleted_fuel_blocks AS (\n                DELETE FROM fuel_blocks fb\n                WHERE EXISTS (\n                    SELECT 1\n                    FROM deleted_bundles db\n                    WHERE fb.height BETWEEN db.start_height AND db.end_height\n                )\n            ),\n\n            -- Delete from l1_transaction\n            deleted_transactions AS (\n                DELETE FROM l1_transaction\n                WHERE created_at < $1\n                RETURNING id, submission_id\n            ),\n\n            -- Build updated_transactions that represent the state after deletions\n            updated_transactions AS (\n                SELECT submission_id FROM l1_transaction\n                WHERE id NOT IN (SELECT id FROM deleted_transactions)\n            ),\n\n            -- Delete from l1_fuel_block_submission\n            deleted_submissions AS (\n                DELETE FROM l1_fuel_block_submission bs\n                WHERE id IN (SELECT submission_id FROM deleted_transactions)\n                  AND NOT EXISTS (\n                      SELECT 1\n                      FROM updated_transactions t\n                      WHERE t.submission_id = bs.id\n                  )\n            )\n\n            SELECT\n                MIN(start_height) AS start_height,\n                MAX(end_height) AS end_height\n            FROM deleted_bundles;\n            ",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "start_height",
        "type_info": "Int8"
      },
      {
        "ordinal": 1,
        "name": "end_height",
        "type_info": "Int8"
      }
    ],
    "parameters": {
      "Left": [
        "Timestamptz"
      ]
    },
    "nullable": [
      null,
      null
    ]
  },
  "hash": "08b8a731d2750dbd8ee2b7d4f550a31cacb7f5a91c3fc1bed412a856efd805de"
}
