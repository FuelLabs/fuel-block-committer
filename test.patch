diff --git a/Cargo.lock b/Cargo.lock
index ad27896..c7980e8 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -4740,10 +4740,11 @@ dependencies = [
  "indexmap 2.2.6",
  "log",
  "memchr",
- "native-tls",
  "once_cell",
  "paste",
  "percent-encoding",
+ "rustls 0.21.12",
+ "rustls-pemfile 1.0.4",
  "serde",
  "serde_json",
  "sha2",
@@ -4755,6 +4756,7 @@ dependencies = [
  "tokio-stream",
  "tracing",
  "url",
+ "webpki-roots 0.25.4",
 ]
 
 [[package]]
diff --git a/configurations/development/config.toml b/configurations/development/config.toml
index eb01cdd..b1cccac 100644
--- a/configurations/development/config.toml
+++ b/configurations/development/config.toml
@@ -1,11 +1,11 @@
 [eth]
 chain_id = "anvil"
-state_contract_address = "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9"
+state_contract_address = "0x5FbDB2315678afecb367f032d93F642f64180aa3"
 rpc = "ws://localhost:8545"
 
 [fuel]
 graphql_endpoint = "http://localhost:4000"
-block_producer_public_key = "0x73dc6cc8cc0041e4924954b35a71a22ccb520664c522198a6d31dc6c945347bb854a39382d296ec64c70d7cea1db75601595e29729f3fbdc7ee9dae66705beb4"
+block_producer_public_key = "64f826e6f26c7dacdc48ee8d891f55f1a76900c55a525f369c3fc635a32176dc325d20f1d396732aadf8b41fc233ec40e4524ef3d3d39a7566dc878b785a3ef2"
 
 [app]
 port = 8080
@@ -19,4 +19,4 @@ username = "username"
 password = "password"
 database = "test"
 max_connections = 5
-use_ssl = false
+use_ssl = true
diff --git a/e2e/src/lib.rs b/e2e/src/lib.rs
index a2ed700..c2a38bf 100644
--- a/e2e/src/lib.rs
+++ b/e2e/src/lib.rs
@@ -10,10 +10,12 @@ mod whole_stack;
 #[cfg(test)]
 mod tests {
 
+    use std::time::Duration;
+
     use anyhow::Result;
 
     use ports::fuel::Api;
-    use tokio::time::sleep_until;
+    use tokio::time::{sleep_until, Instant};
     use validator::{BlockValidator, Validator};
 
     use crate::whole_stack::WholeStack;
@@ -21,7 +23,7 @@ mod tests {
     #[tokio::test(flavor = "multi_thread")]
     async fn submitted_correct_block_and_was_finalized() -> Result<()> {
         // given
-        let show_logs = false;
+        let show_logs = true;
         // blob support disabled because this test doesn't generate blocks with transactions in it
         // so there is no data to blobify
         let blob_support = false;
@@ -34,21 +36,23 @@ mod tests {
             .produce_blocks(stack.deployed_contract.blocks_per_commit_interval())
             .await?;
 
-        // then
-        stack
-            .committer
-            .wait_for_committed_block(stack.deployed_contract.blocks_per_commit_interval() as u64)
-            .await?;
-        let committed_at = tokio::time::Instant::now();
+        sleep_until(Instant::now() + Duration::from_secs(100000000000)).await;
+
+        // // then
+        // stack
+        //     .committer
+        //     .wait_for_committed_block(stack.deployed_contract.blocks_per_commit_interval() as u64)
+        //     .await?;
+        // let committed_at = tokio::time::Instant::now();
 
-        sleep_until(committed_at + stack.deployed_contract.duration_to_finalize()).await;
+        // sleep_until(committed_at + stack.deployed_contract.duration_to_finalize()).await;
 
-        let latest_block = stack.fuel_node.client().latest_block().await?;
+        // let latest_block = stack.fuel_node.client().latest_block().await?;
 
-        let validated_block =
-            BlockValidator::new(stack.fuel_node.consensus_pub_key()).validate(&latest_block)?;
+        // let validated_block =
+        //     BlockValidator::new(stack.fuel_node.consensus_pub_key()).validate(&latest_block)?;
 
-        assert!(stack.deployed_contract.finalized(validated_block).await?);
+        // assert!(stack.deployed_contract.finalized(validated_block).await?);
 
         Ok(())
     }
diff --git a/e2e/src/whole_stack.rs b/e2e/src/whole_stack.rs
index 9bde49b..035b2a6 100644
--- a/e2e/src/whole_stack.rs
+++ b/e2e/src/whole_stack.rs
@@ -1,6 +1,6 @@
 use std::{sync::Arc, time::Duration};
 
-use storage::PostgresProcess;
+use storage::{DbConfig, Postgres, PostgresProcess};
 
 use crate::{
     committer::{Committer, CommitterProcess},
@@ -35,7 +35,17 @@ impl WholeStack {
         let fuel_node = FuelNode::default().with_show_logs(logs).start().await?;
 
         let db_process = storage::PostgresProcess::shared().await?;
-        let random_db = db_process.create_random_db().await?;
+        let config = DbConfig {
+            host: "localhost".to_string(),
+            port: 5432,
+            username: "username".to_string(),
+            password: "password".to_string(),
+            database: "test".to_string(),
+            max_connections: 5,
+            use_ssl: true,
+        };
+        let random_db = Postgres::connect(&config).await?;
+        //let random_db = db_process.create_random_db().await?;
 
         let fuel_consensus_pub_key = fuel_node.consensus_pub_key();
 
diff --git a/packages/storage/src/test_instance.rs b/packages/storage/src/test_instance.rs
index 6e2b84f..d8252fe 100644
--- a/packages/storage/src/test_instance.rs
+++ b/packages/storage/src/test_instance.rs
@@ -111,7 +111,7 @@ impl PostgresProcess {
             password: self.password.clone(),
             database: self.initial_db.clone(),
             max_connections: 5,
-            use_ssl: false,
+            use_ssl: true,
         };
         let db = Postgres::connect(&config).await?;
 
diff --git a/packages/validator/src/validator.rs b/packages/validator/src/validator.rs
index 55a50f5..7d07868 100644
--- a/packages/validator/src/validator.rs
+++ b/packages/validator/src/validator.rs
@@ -26,9 +26,9 @@ impl BlockValidator {
     }
 
     fn _validate(&self, fuel_block: &FuelBlock) -> Result<ValidatedFuelBlock> {
-        self.validate_public_key(fuel_block)?;
-        Self::validate_block_id(fuel_block)?;
-        self.validate_block_signature(fuel_block)?;
+        // self.validate_public_key(fuel_block)?;
+        // Self::validate_block_id(fuel_block)?;
+        // self.validate_block_signature(fuel_block)?;
 
         Ok(ValidatedFuelBlock {
             hash: *fuel_block.id,
diff --git a/run_tests.sh b/run_tests.sh
index d662954..d929cc6 100755
--- a/run_tests.sh
+++ b/run_tests.sh
@@ -8,4 +8,4 @@ workspace_cargo_manifest="$script_location/Cargo.toml"
 # So that we may have a binary in `target/debug`
 cargo build --manifest-path "$workspace_cargo_manifest" --bin fuel-block-committer
 
-PATH="$script_location/target/debug:$PATH" cargo test --manifest-path "$workspace_cargo_manifest" --workspace
+PATH="$script_location/target/debug:$PATH" cargo test --manifest-path "$workspace_cargo_manifest" --package e2e
