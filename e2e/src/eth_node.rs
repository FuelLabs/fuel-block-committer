const FOUNDRY_PROJECT: &str = concat!(env!("OUT_DIR"), "/foundry");

use std::path::Path;
use std::sync::Arc;
use std::time::Duration;

use eth::WebsocketClient;
use ethers::middleware::Middleware;
use ethers::providers::{Provider, ProviderExt, Ws};
use ethers::signers::AwsSigner;
use ethers::types::{Bytes, Eip1559TransactionRequest, U256, U64};
use ethers::{
    abi::Address,
    middleware::SignerMiddleware,
    signers::{
        coins_bip39::{English, Mnemonic},
        LocalWallet, MnemonicBuilder, Signer,
    },
    types::{Chain, TransactionRequest},
};
use ports::types::ValidatedFuelBlock;
use serde::Deserialize;
use url::Url;

use crate::kms::KmsKey;

#[derive(Default, Debug)]
pub struct EthNode {
    show_logs: bool,
}

impl EthNode {
    pub async fn start(&self) -> anyhow::Result<EthNodeProcess> {
        let unused_port = portpicker::pick_unused_port()
            .ok_or_else(|| anyhow::anyhow!("No free port to start anvil"))?;

        let mnemonic = Mnemonic::<English>::new(&mut rand::thread_rng()).to_phrase();

        let mut cmd = tokio::process::Command::new("anvil");

        cmd.arg("--port")
            .arg(unused_port.to_string())
            .arg("--mnemonic")
            .arg(&mnemonic)
            .arg("--block-time")
            .arg("1")
            .kill_on_drop(true)
            .stdin(std::process::Stdio::null());

        let sink = if self.show_logs {
            std::process::Stdio::inherit
        } else {
            std::process::Stdio::null
        };
        cmd.stdout(sink()).stderr(sink());

        let child = cmd.spawn()?;

        Ok(EthNodeProcess::new(
            child,
            unused_port,
            Chain::AnvilHardhat.into(),
            mnemonic,
        ))
    }

    pub fn with_show_logs(mut self, show_logs: bool) -> Self {
        self.show_logs = show_logs;
        self
    }
}

pub struct EthNodeProcess {
    _child: tokio::process::Child,
    chain_id: u64,
    port: u16,
    mnemonic: String,
}

impl EthNodeProcess {
    fn new(child: tokio::process::Child, port: u16, chain_id: u64, mnemonic: String) -> Self {
        Self {
            _child: child,
            mnemonic,
            port,
            chain_id,
        }
    }

    pub async fn deploy_contract(
        &self,
        kms_key: KmsKey,
        seconds_to_finalize: u64,
        blocks_per_commit_interval: u32,
        commit_cooldown_seconds: u32,
    ) -> anyhow::Result<DeployedContract> {
        eprintln!("The address is: {:?}", kms_key.address());
        let output = tokio::process::Command::new("forge")
            .current_dir(FOUNDRY_PROJECT)
            .arg("script")
            .arg("script/deploy.sol:MyScript")
            .arg("--fork-url")
            .arg(&format!("http://localhost:{}", self.port()))
            .stdin(std::process::Stdio::null())
            .env("ADDRESS", format!("{:?}", kms_key.address()))
            .env("TIME_TO_FINALIZE", seconds_to_finalize.to_string())
            .env(
                "BLOCKS_PER_COMMIT_INTERVAL",
                blocks_per_commit_interval.to_string(),
            )
            .env("COMMIT_COOLDOWN", commit_cooldown_seconds.to_string())
            .kill_on_drop(true)
            .output()
            .await?;

        if !output.status.success() {
            return Err(anyhow::anyhow!(
                "Failed to deploy chain state contract: {}",
                String::from_utf8_lossy(&output.stderr)
            ));
        }

        let stdout = String::from_utf8(output.stdout)?;
        let match_txt = "Transactions saved to: ";
        let transactions_file = stdout
            .lines()
            .find(|line| line.contains(match_txt))
            .ok_or_else(|| anyhow::anyhow!("no line in output contains text {match_txt}"))?
            .replace(match_txt, "")
            .trim()
            .to_string();

        let contents = tokio::fs::read_to_string(&transactions_file).await?;
        let broadcasts: Broadcasts = serde_json::from_str(&contents)?;

        let proxy_contract_address = broadcasts
            .transactions
            .iter()
            .find_map(|tx| (tx.name == "ERC1967Proxy").then_some(tx.address))
            .ok_or_else(|| anyhow::anyhow!("No ERC1967Proxy contract created"))?;

        for create_tx in broadcasts.transactions {
            let provider = Provider::<Ws>::connect(self.ws_url()).await?;
            let signer = kms_key.signer.clone();
            let signer_middleware = SignerMiddleware::new(provider, signer);
            let mut typed_transaction = Eip1559TransactionRequest::default();
            typed_transaction.from = Some(create_tx.raw_tx.from);
            typed_transaction.gas = Some(create_tx.raw_tx.gas);
            typed_transaction.value = Some(create_tx.raw_tx.value);
            typed_transaction.data = Some(create_tx.raw_tx.input);
            typed_transaction.chain_id = Some(create_tx.raw_tx.chain_id);
            let status = signer_middleware
                .send_transaction(typed_transaction, None)
                .await?
                .confirmations(1)
                .await?
                .ok_or_else(|| anyhow::anyhow!("No receipts"))?
                .status
                .ok_or_else(|| anyhow::anyhow!("No status"))?;

            if status != 1.into() {
                anyhow::bail!("Failed to deploy contract {}", create_tx.name);
            }
            eprintln!("Deployed contract {}", create_tx.name);
        }

        let deployed_contract = DeployedContract::connect(
            &self.ws_url(),
            proxy_contract_address,
            kms_key,
            seconds_to_finalize,
            blocks_per_commit_interval,
            commit_cooldown_seconds,
        )
        .await?;

        Ok(deployed_contract)
    }

    fn private_key_as_hex(wallet: &LocalWallet) -> String {
        let bytes = wallet.signer().to_bytes();
        format!("0x{}", hex::encode(bytes))
    }

    fn main_wallet(&self) -> LocalWallet {
        MnemonicBuilder::<English>::default()
            .phrase(self.mnemonic.as_str())
            .build()
            .expect("phrase to be correct")
            .with_chain_id(Chain::AnvilHardhat)
    }

    fn secondary_wallet(&self) -> LocalWallet {
        MnemonicBuilder::<English>::default()
            .phrase(self.mnemonic.as_str())
            .index(1u32)
            .expect("Should generate a valid derivation path")
            .build()
            .expect("phrase to be correct")
            .with_chain_id(Chain::AnvilHardhat)
    }

    pub fn ws_url(&self) -> Url {
        format!("ws://localhost:{}", self.port)
            .parse()
            .expect("URL to be well formed")
    }

    pub fn port(&self) -> u16 {
        self.port
    }

    pub fn chain_id(&self) -> u64 {
        self.chain_id
    }

    pub async fn fund(&self, address: Address, amount: U256) -> anyhow::Result<()> {
        let wallet = self.main_wallet();
        let provider = Provider::<Ws>::connect(self.ws_url())
            .await
            .expect("to connect to the provider");

        let signer_middleware = SignerMiddleware::new(provider, wallet);

        let tx = TransactionRequest::pay(address, amount);

        let status = Middleware::send_transaction(&signer_middleware, tx, None)
            .await?
            .confirmations(1)
            .await?
            .unwrap()
            .status
            .unwrap();

        if status == 1.into() {
            Ok(())
        } else {
            Err(anyhow::anyhow!("Failed to fund address {address}"))
        }
    }
}

// {
//   "transactions": [
//     {
//       "hash": null,
//       "transactionType": "CREATE",
//       "contractName": "FuelChainState",
//       "contractAddress": "0x5fbdb2315678afecb367f032d93f642f64180aa3",
//       "function": null,
//       "arguments": [
//         "1",
//         "1",
//         "1"
//       ],
//       "transaction": {
//         "from": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
//         "gas": "0x1cf547",
//         "value": "0x0",
//         "input": "0x6101006040523060805234801561001557600080fd5b50604051611b5a380380611b5a8339810160408190526100349161019a565b8063ffffffff1683111561005b57604051637f6a9fa960e11b815260040160405180910390fd5b60006100688360f06101dd565b90508084111561008b57604051631357825760e01b815260040160405180910390fd5b808263ffffffff1611156100b557604051600162118fd960e11b0319815260040160405180910390fd5b60c084905263ffffffff821660e05260a08390526100d16100da565b50505050610208565b600054610100900460ff16156101465760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015610198576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6000806000606084860312156101af57600080fd5b835160208501516040860151919450925063ffffffff811681146101d257600080fd5b809150509250925092565b808202811582820484141761020257634e487b7160e01b600052601160045260246000fd5b92915050565b60805160a05160c05160e0516118e8610272600039600081816103330152610b270152600081816103b10152610a650152600081816102d501526109eb015260008181610597015281816105d701528181610689015281816106c9015261075801526118e86000f3fe6080604052600436106101405760003560e01c8063735808b7116100b6578063a42747da1161006f578063a42747da1461039f578063c8902398146103d3578063d547741f146103f3578063dc801def14610413578063e63ab1e914610428578063e900ead81461045c57600080fd5b8063735808b7146102c35780638129fc1c146102f75780638456cb591461030c57806384cbff5f1461032157806391d148541461036a578063a217fddf1461038a57600080fd5b806336568abe1161010857806336568abe1461022e5780633659cfe61461024e5780633f4ba83a1461026e5780634f1ef2861461028357806352d1902d146102965780635c975abb146102ab57600080fd5b806301ffc9a7146101455780631a7c3f731461017a578063248a9ca3146101bc5780632f2ff15d146101ec57806331c8b8171461020e575b600080fd5b34801561015157600080fd5b50610165610160366004611434565b61047c565b60405190151581526020015b60405180910390f35b34801561018657600080fd5b506101ae7f0b60b5d7f7e737e4561eecda7c6a01e19e626c495c26e6f45e5b255f76a2010681565b604051908152602001610171565b3480156101c857600080fd5b506101ae6101d736600461145e565b60009081526097602052604090206001015490565b3480156101f857600080fd5b5061020c610207366004611493565b6104b3565b005b34801561021a57600080fd5b506101ae61022936600461145e565b6104dd565b34801561023a57600080fd5b5061020c610249366004611493565b61050a565b34801561025a57600080fd5b5061020c6102693660046114bf565b61058d565b34801561027a57600080fd5b5061020c61066c565b61020c6102913660046114f0565b61067f565b3480156102a257600080fd5b506101ae61074b565b3480156102b757600080fd5b5060335460ff16610165565b3480156102cf57600080fd5b506101ae7f000000000000000000000000000000000000000000000000000000000000000081565b34801561030357600080fd5b5061020c6107fe565b34801561031857600080fd5b5061020c61097d565b34801561032d57600080fd5b506103557f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610171565b34801561037657600080fd5b50610165610385366004611493565b6109af565b34801561039657600080fd5b506101ae600081565b3480156103ab57600080fd5b506101ae7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103df57600080fd5b506101656103ee3660046115ba565b6109da565b3480156103ff57600080fd5b5061020c61040e366004611493565b610a9c565b34801561041f57600080fd5b506101ae60f081565b34801561043457600080fd5b506101ae7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b34801561046857600080fd5b5061020c6104773660046115ba565b610ac1565b60006001600160e01b03198216637965db0b60e01b14806104ad57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152609760205260409020600101546104ce81610bd7565b6104d88383610be1565b505050565b60008061012d6104ee60f0856115f2565b60f081106104fe576104fe611606565b60020201549392505050565b6001600160a01b038116331461057f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6105898282610c67565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105d55760405162461bcd60e51b81526004016105769061161c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661061e60008051602061186c833981519152546001600160a01b031690565b6001600160a01b0316146106445760405162461bcd60e51b815260040161057690611668565b61064d81610cce565b6040805160008082526020820190925261066991839190610cd9565b50565b600061067781610bd7565b610669610e44565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106c75760405162461bcd60e51b81526004016105769061161c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661071060008051602061186c833981519152546001600160a01b031690565b6001600160a01b0316146107365760405162461bcd60e51b815260040161057690611668565b61073f82610cce565b61058982826001610cd9565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107eb5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610576565b5060008051602061186c83398151915290565b600054610100900460ff161580801561081e5750600054600160ff909116105b806108385750303b158015610838575060005460ff166001145b61089b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610576565b6000805460ff1916600117905580156108be576000805461ff0019166101001790555b6108c6610e96565b6108ce610ec7565b6108d6610ec7565b6108e1600033610be1565b61090b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610be1565b6109357f0b60b5d7f7e737e4561eecda7c6a01e19e626c495c26e6f45e5b255f76a2010633610be1565b8015610669576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6109a781610bd7565b610669610eee565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006109e4610f2b565b6000610a107f0000000000000000000000000000000000000000000000000000000000000000846116ca565b9050600061012d610a2260f0846115f2565b60f08110610a3257610a32611606565b6002020180549091508514610a5a576040516379a3cb5f60e01b815260040160405180910390fd5b6001810154610a90907f00000000000000000000000000000000000000000000000000000000000000009063ffffffff166116de565b42101595945050505050565b600082815260976020526040902060010154610ab781610bd7565b6104d88383610c67565b610ac9610f2b565b7f0b60b5d7f7e737e4561eecda7c6a01e19e626c495c26e6f45e5b255f76a20106610af381610bd7565b6000610b0060f0846115f2565b9050600061012d8260f08110610b1857610b18611606565b6002020190504263ffffffff167f00000000000000000000000000000000000000000000000000000000000000008260010160009054906101000a900463ffffffff160163ffffffff161115610b815760405163f9381c6d60e01b815260040160405180910390fd5b84815560018101805463ffffffff19164263ffffffff1617905560405185815284907f1216b936e7a60e132d92c23737227ff7219df68ab525a98fa65f09b655f31e329060200160405180910390a25050505050565b6106698133610f71565b610beb82826109af565b6105895760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610c233390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610c7182826109af565b156105895760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061058981610bd7565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610d0c576104d883610fca565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610d66575060408051601f3d908101601f19168201909252610d63918101906116f1565b60015b610dc95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610576565b60008051602061186c8339815191528114610e385760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610576565b506104d8838383611066565b610e4c611091565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054610100900460ff16610ebd5760405162461bcd60e51b81526004016105769061170a565b610ec56110da565b565b600054610100900460ff16610ec55760405162461bcd60e51b81526004016105769061170a565b610ef6610f2b565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e793390565b60335460ff1615610ec55760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610576565b610f7b82826109af565b61058957610f888161110d565b610f9383602061111f565b604051602001610fa4929190611779565b60408051601f198184030181529082905262461bcd60e51b8252610576916004016117ee565b6001600160a01b0381163b6110375760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610576565b60008051602061186c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61106f836112c2565b60008251118061107c5750805b156104d85761108b8383611302565b50505050565b60335460ff16610ec55760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610576565b600054610100900460ff166111015760405162461bcd60e51b81526004016105769061170a565b6033805460ff19169055565b60606104ad6001600160a01b03831660145b6060600061112e836002611821565b6111399060026116de565b67ffffffffffffffff811115611151576111516114da565b6040519080825280601f01601f19166020018201604052801561117b576020820181803683370190505b509050600360fc1b8160008151811061119657611196611606565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106111c5576111c5611606565b60200101906001600160f81b031916908160001a90535060006111e9846002611821565b6111f49060016116de565b90505b600181111561126c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061122857611228611606565b1a60f81b82828151811061123e5761123e611606565b60200101906001600160f81b031916908160001a90535060049490941c9361126581611838565b90506111f7565b5083156112bb5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610576565b9392505050565b6112cb81610fca565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61136a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610576565b600080846001600160a01b031684604051611385919061184f565b600060405180830381855af49150503d80600081146113c0576040519150601f19603f3d011682016040523d82523d6000602084013e6113c5565b606091505b50915091506113ed828260405180606001604052806027815260200161188c602791396113f6565b95945050505050565b606083156114055750816112bb565b6112bb838381511561141a5781518083602001fd5b8060405162461bcd60e51b815260040161057691906117ee565b60006020828403121561144657600080fd5b81356001600160e01b0319811681146112bb57600080fd5b60006020828403121561147057600080fd5b5035919050565b80356001600160a01b038116811461148e57600080fd5b919050565b600080604083850312156114a657600080fd5b823591506114b660208401611477565b90509250929050565b6000602082840312156114d157600080fd5b6112bb82611477565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561150357600080fd5b61150c83611477565b9150602083013567ffffffffffffffff81111561152857600080fd5b8301601f8101851361153957600080fd5b803567ffffffffffffffff811115611553576115536114da565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715611582576115826114da565b60405281815282820160200187101561159a57600080fd5b816020840160208301376000602083830101528093505050509250929050565b600080604083850312156115cd57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601260045260246000fd5b600082611601576116016115dc565b500690565b634e487b7160e01b600052603260045260246000fd5b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000826116d9576116d96115dc565b500490565b808201808211156104ad576104ad6116b4565b60006020828403121561170357600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015611770578181015183820152602001611758565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516117b1816017850160208801611755565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516117e2816028840160208801611755565b01602801949350505050565b602081526000825180602084015261180d816040850160208701611755565b601f01601f19169190910160400192915050565b80820281158282048414176104ad576104ad6116b4565b600081611847576118476116b4565b506000190190565b60008251611861818460208701611755565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208cbbd3cdde18711641f205eec82077351849f24ce24abcee7229c27456ad878464736f6c634300081a0033000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001",
//         "nonce": "0x0",
//         "chainId": "0x7a69"
//       },
//       "additionalContracts": [],
//       "isFixedGasLimit": false
//     },
//     {
//       "hash": null,
//       "transactionType": "CREATE",
//       "contractName": "ERC1967Proxy",
//       "contractAddress": "0xe7f1725e7734ce288f8367e1bb143e90bb3f0512",
//       "function": null,
//       "arguments": [
//         "0x5FbDB2315678afecb367f032d93F642f64180aa3",
//         "0x8129fc1c"
//       ],
//       "transaction": {
//         "from": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
//         "gas": "0x49b9f",
//         "value": "0x0",
//         "input": "0x608060405260405161041038038061041083398101604081905261002291610268565b61002c8282610033565b5050610358565b61003c82610092565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561008657610081828261010e565b505050565b61008e610185565b5050565b806001600160a01b03163b6000036100cd57604051634c9c8ce360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b03168460405161012b919061033c565b600060405180830381855af49150503d8060008114610166576040519150601f19603f3d011682016040523d82523d6000602084013e61016b565b606091505b50909250905061017c8583836101a6565b95945050505050565b34156101a45760405163b398979f60e01b815260040160405180910390fd5b565b6060826101bb576101b682610205565b6101fe565b81511580156101d257506001600160a01b0384163b155b156101fb57604051639996b31560e01b81526001600160a01b03851660048201526024016100c4565b50805b9392505050565b8051156102155780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b60005b8381101561025f578181015183820152602001610247565b50506000910152565b6000806040838503121561027b57600080fd5b82516001600160a01b038116811461029257600080fd5b60208401519092506001600160401b038111156102ae57600080fd5b8301601f810185136102bf57600080fd5b80516001600160401b038111156102d8576102d861022e565b604051601f8201601f19908116603f011681016001600160401b03811182821017156103065761030661022e565b60405281815282820160200187101561031e57600080fd5b61032f826020830160208601610244565b8093505050509250929050565b6000825161034e818460208701610244565b9190910192915050565b60aa806103666000396000f3fe6080604052600a600c565b005b60186014601a565b6051565b565b6000604c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e808015606f573d6000f35b3d6000fdfea26469706673582212206fb4be44ed066ad3b3d3e7c6e3b7429bb8fbcd9915da9cb27a53c26b9ce8417564736f6c634300081a00330000000000000000000000005fbdb2315678afecb367f032d93f642f64180aa3000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000048129fc1c00000000000000000000000000000000000000000000000000000000",
//         "nonce": "0x1",
//         "chainId": "0x7a69"
//       },
//       "additionalContracts": [],
//       "isFixedGasLimit": false
//     }
//   ],
//   "receipts": [],
//   "libraries": [],
//   "pending": [],
//   "returns": {},
//   "timestamp": 1722435828,
//   "chain": 31337,
//   "commit": "bfd8e71"
// }

#[derive(Debug, Clone, Deserialize)]
struct RawTx {
    from: Address,
    gas: U256,
    value: U256,
    input: Bytes,
    #[serde(rename = "chainId")]
    chain_id: U64,
}
#[derive(Debug, Clone, Deserialize)]
struct CreateContractTx {
    #[serde(rename = "contractName")]
    name: String,
    #[serde(rename = "contractAddress")]
    address: Address,
    #[serde(rename = "transaction")]
    raw_tx: RawTx,
}

#[derive(Debug, Clone, Deserialize)]
struct Broadcasts {
    transactions: Vec<CreateContractTx>,
}

pub struct DeployedContract {
    address: Address,
    chain_state_contract: WebsocketClient,
    duration_to_finalize: Duration,
    blocks_per_commit_interval: u32,
    _commit_cooldown_seconds: u32,
}

impl DeployedContract {
    async fn connect(
        url: &Url,
        address: Address,
        key: KmsKey,
        seconds_to_finalize: u64,
        blocks_per_commit_interval: u32,
        commit_cooldown_seconds: u32,
    ) -> anyhow::Result<Self> {
        let blob_wallet = None;
        let region: String = serde_json::to_string(&key.region)?;
        let chain_state_contract = WebsocketClient::connect(
            url,
            Chain::AnvilHardhat,
            address,
            key.id,
            blob_wallet,
            5,
            region,
            "test".to_string(),
            "test".to_string(),
            true,
        )
        .await?;

        Ok(Self {
            address,
            chain_state_contract,
            duration_to_finalize: Duration::from_secs(seconds_to_finalize),
            blocks_per_commit_interval,
            _commit_cooldown_seconds: commit_cooldown_seconds,
        })
    }

    pub async fn finalized(&self, block: ValidatedFuelBlock) -> anyhow::Result<bool> {
        self.chain_state_contract
            .finalized(block)
            .await
            .map_err(Into::into)
    }

    pub fn address(&self) -> Address {
        self.address
    }

    pub fn duration_to_finalize(&self) -> Duration {
        self.duration_to_finalize
    }

    pub fn blocks_per_commit_interval(&self) -> u32 {
        self.blocks_per_commit_interval
    }

    #[allow(dead_code)]
    pub fn commit_cooldown_seconds(&self) -> u32 {
        self._commit_cooldown_seconds
    }
}
